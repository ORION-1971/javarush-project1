package com.javarush.games.anygame.islandia.moves;

import com.javarush.engine.cell.Color;
import com.javarush.engine.cell.Game;
import com.javarush.games.anygame.islandia.herbivores.Enum2;
import com.javarush.games.anygame.islandia.herbivores.PlantEating;
import com.javarush.games.anygame.islandia.herbivores.RabbType;
import com.javarush.games.anygame.islandia.mouse.MouseType;
import com.javarush.games.anygame.islandia.mouse.Rats;
import com.javarush.games.anygame.islandia.hishniki.Enum3;
import com.javarush.games.anygame.islandia.hishniki.Predator;
import com.javarush.games.anygame.islandia.hishniki.PredatorType;
import com.javarush.games.anygame.islandia.plantacia.*;

import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;

/* 
–õ—é–±–∞—è –∏–≥—Ä–∞
*/
public class AnyGame extends Game {
    // ======================= –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†–´ ================================
    public static int speed = 200;                  // —Å–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã
    public static int width = 30;                   // —à–∏—Ä–∏–Ω–∞ –ø–æ–ª—è
    public static int height = 30;                  // –≤—ã—Å–æ—Ç–∞ –ø–æ–ª—è

    public static int herbar = 1000;                 // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –ø—Ä–∏—Ä–æ—Å—Ç
    public static int plantEatings = 3;  // 5 –∏–∑ 10 –æ—Ç –Ω–æ—Ä–º—ã —Ç–∞–±–ª–∏—Ü—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö
    public static int predators = 3;     // 5 –∏–∑ 10 –æ—Ç –Ω–æ—Ä–º—ã —Ç–∞–±–ª–∏—Ü—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∏—â–Ω–∏–∫–æ–≤
    public static int mouses = 2;        // 5 –∏–∑ 10 –æ—Ç –Ω–æ—Ä–º—ã —Ç–∞–±–ª–∏—Ü—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—ã—à–µ–π
    public static int hungrySpeed = 5;   // 5 –æ–ø—Ç–∏–º–∞–ª –∫–∞–∫ –¥–æ–ª–≥–æ –∂–∏–≤–µ—Ç –±–µ–∑ –µ–¥—ã
    // =======================================================================



    // –•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–• –ù–ò–ñ–ï –î–ï–õ–ê–¢–¨ –ù–ï–ß–ï–ì–û –•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•–•
    static int day = 0;                              // —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π
    public static int animal = 5;                    // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö
    Color color = Color.BLACK;                       // —Ü–≤–µ—Ç –∏–∫–æ–Ω–∫–∏
    int textSize = 95;                               // —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
    static boolean wolfSex = true;                   // —Å–ø–∞–≤–Ω –≤–æ–ª–∫–æ–≤
    static boolean rabbitSex = true;                 // —Å–ø–∞–≤–Ω –∫—Ä–æ–ª–∏–∫–æ–≤
    static boolean mouseSex = true;                 // —Å–ø–∞–≤–Ω –º—ã—à–µ–π
    static boolean herbSex = true;                   // —Å–ø–∞–≤–Ω —Ä–∞—Å—Ç–µ–Ω–∏–π
    public static int herbDead;
    public static int herbLive;

    static int rabbitEat = 0;
    static int rabbitPlus = 0;
    static int wolfPlus = 0;

    public static ArrayList[][][] cubix = new ArrayList[width][height][animal];                     // –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ 3D –º–∞—Å—Å–∏–≤–∞
    public static ArrayList[][][] cubix2 = new ArrayList[width][height][animal];                    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ 3D –º–∞—Å—Å–∏–≤–∞
    public static String[][] matrix = new String[width][height];                                    // –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ 2D –º–∞—Å—Å–∏–≤–∞

   /* public class Stremchanin implements Runnable {
        @Override
        public void run() {
            //AnyGame anyGame = new AnyGame();
            while (rabbitLive != 0) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

                day++;
                drawer();
            }

        }
    }*/

    @Override
    public void initialize() {                          // üêÉ, üêª, üêé, ü¶å, üêó, üêë, üêê,üê∫ , üêç, ü¶ä, ü¶Ö, üêá, ü¶Ü, üêÅ, üêõ, üçÄ, ‚¨úÔ∏è
        setScreenSize(width, height);                                                          //—Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
        showGrid(false);                                                                // —Å–µ—Ç–∫–∞

        //potoc();
        setTurnTimer(speed);                                                                    //–í–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä, –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ ‚Äì 500–º—Å.
        cubatrix();                                                                             //  –∑–∞–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã–º–∏
    }

    // ------------------------—Ç–∞–π–º–µ—Ä-------------------------------------
    @Override
    public void onTurn(int step) {
        drawer();
        day++;
    }
    // ----------------- –ú–ù–û–ì–û–ü–û–¢–û–ß–ö–ê ------------------------------ –ø–æ–∫–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω –∏–¥–µ—Ç
   /* public void potoc() {
        Stremchanin stremchanin = new Stremchanin();
        Thread sss = new Thread(stremchanin);
        Thread sss1 = new Thread(stremchanin);
        sss.start();
        try {
            sss.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        sss1.start();
        if(wolfLive == 0) sss.interrupt();
        if(rabbitLive == 0) sss1.interrupt();
    }*/


    //-------------------------- –ª–æ–≥–∏–∫–∞ –∂–∏–∑–Ω–∏--------------------------------------
    public void drawer() {
        setka();
        setCellValueEx(width - 1, 0, Color.WHITE, day + "", Color.BLACK, 40);                        // —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ
        //if (day % 5 == 0) System.out.print("\n" +  day + " –¥–µ–Ω—å  ");

        if (herbSex || day % 30 == 0) {                                                                                 // —Ç—Ä–∞–≤–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ 30 —Ç–∞–∫—Ç–æ–≤
            //if (herbLive - herbDead < 500) {
                for (int i = 0; i < herbar; i++) {                        // –∑–∞—Å–µ–≤ —Ä–∞—Å—Å—Ç–µ–Ω–∏–π
                    for (Enum1 types : Enum1.values()) {
                        PlantType plantType = new PlantType();
                        Plant plant = plantType.creats(types);

                        cubix[ThreadLocalRandom.current().nextInt(width - 1)][ThreadLocalRandom.current().nextInt(height - 1)][1].add(plant);
                    }
                    herbLive++;
                }
            //}
            herbSex = false;
        }

        if (rabbitSex) {                                           // –∑–∞–±—Ä–æ—Å –Ω–∞ –ª–æ–∫–∞—Ü–∏—é –∂–∏–≤–Ω–æ—Å—Ç–∏
            for (Enum2 types : Enum2.values()) {
                PlantEating plantEating = new RabbType().creats(types);
                for (int i = 0; i < plantEatings * plantEating.getMax() / 10; i++) {
                    cubix[ThreadLocalRandom.current().nextInt(width)][ThreadLocalRandom.current().nextInt(height)][2].add(new RabbType().creats(types));
                    plantEating.livePluss();
                }
                rabbitSex = false;
            }
        }

        if (wolfSex) {
            for (Enum3 types : Enum3.values()) {                                           // —Å–ø–∞–≤–Ω —Ö–∏—â–Ω–∏–∫–æ–≤
                Predator predator = new PredatorType().creats(types);
                for (int i = 0; i < predators * predator.getMax() / 10; i++) {
                    cubix[ThreadLocalRandom.current().nextInt(width)][ThreadLocalRandom.current().nextInt(height)][3].add(new PredatorType().creats(types));
                    predator.livePluss();
                }
                wolfSex = false;
            }
        }

//        if (mouseSex) {
//            for (Enum4 types : Enum4.values()) {                                // –∑–∞—Ä–æ–¥–∏–ª—Å—è –Ω–æ–≤—ã–π –º—ã—à—å
//                Rats rats = new MouseType().creats(types);
//                for (int i = 0; i < mouses * rats.getMax() / 10; i++) {
//                    cubix[ThreadLocalRandom.current().nextInt(width)][ThreadLocalRandom.current().nextInt(height)][3].add(new MouseType().creats(types));
//                    rats.livePluss();
//                }
//                wolfSex = false;
//            }
//        }


        // --------------------  –ò–ù–§–û –ü–ê–ù–ï–õ–¨ --------------------------------------
        setCellValueEx(width - 1, 2, Color.WHITE, "üåø", Color.GREEN, 95);                    // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(width - 1, 3, Color.WHITE, herbLive - herbDead + "", Color.BLACK, 40);
        setCellValueEx(width - 1, 4, Color.WHITE, herbDead + "", Color.RED, 40);


        setCellValueEx(width - 1, 6, Color.WHITE, "üêª", Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(width - 1, 7, Color.WHITE, PredatorType.bearLive - PredatorType.bearDead + "", Color.BLACK, 60);
        setCellValueEx(width - 1, 8, Color.WHITE, PredatorType.bearDead + "", Color.RED, 60);

        setCellValueEx(width - 1, 10, Color.WHITE, "üê∫", Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(width - 1, 11, Color.WHITE, PredatorType.wolfLive - PredatorType.wolfDead + "", Color.BLACK, 60);
        setCellValueEx(width - 1, 12, Color.WHITE, PredatorType.wolfDead + "", Color.RED, 60);

        setCellValueEx(width - 1, 14, Color.WHITE, "ü¶ä", Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(width - 1, 15, Color.WHITE, PredatorType.foxLive - PredatorType.foxDead + "", Color.BLACK, 60);
        setCellValueEx(width - 1, 16, Color.WHITE, PredatorType.foxDead + "", Color.RED, 60);

        setCellValueEx(width - 1, 18, Color.WHITE, "üêç", Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(width - 1, 19, Color.WHITE, PredatorType.boaLive - PredatorType.boaDead + "", Color.BLACK, 60);
        setCellValueEx(width - 1, 20, Color.WHITE, PredatorType.boaDead + "", Color.RED, 60);

        setCellValueEx(width - 1, 22, Color.WHITE, "ü¶Ö", Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(width - 1, 23, Color.WHITE, PredatorType.eagleLive - PredatorType.eagleDead + "", Color.BLACK, 60);
        setCellValueEx(width - 1, 24, Color.WHITE, PredatorType.eagleDead + "", Color.RED, 60);

        setCellValueEx(width - 1, 27, Color.WHITE, "ü¶Ü", Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(width - 1, 28, Color.WHITE, RabbType.duckLive - RabbType.duckDead + "", Color.BLACK, 60);
        setCellValueEx(width - 1, 29, Color.WHITE, RabbType.duckDead + "", Color.RED, 60);

//------------------------------------------------------------------------------------------------------------------------
        setCellValueEx(0, height - 1, Color.WHITE, "üêá", Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(1, height - 1, Color.WHITE, RabbType.rabbitLive - RabbType.rabbitDead + "", Color.BLACK, 60);
        setCellValueEx(2, height - 1, Color.WHITE, RabbType.rabbitDead + "", Color.RED, 60);

        setCellValueEx(4, height - 1, Color.WHITE, "üêë", Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(5, height - 1, Color.WHITE, RabbType.sheepLive - RabbType.sheepDead + "", Color.BLACK, 60);
        setCellValueEx(6, height - 1, Color.WHITE, RabbType.sheepDead + "", Color.RED, 60);

        setCellValueEx(8, height - 1, Color.WHITE, "üêê" , Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(9, height - 1, Color.WHITE, RabbType.goatLive - RabbType.goatDead + "", Color.BLACK, 60);
        setCellValueEx(10, height - 1, Color.WHITE, RabbType.goatDead + "", Color.RED, 60);

        setCellValueEx(12, height - 1, Color.WHITE, "üêñ" , Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(13, height - 1, Color.WHITE, RabbType.boarLive - RabbType.boarDead + "", Color.BLACK, 60);
        setCellValueEx(14, height - 1, Color.WHITE, RabbType.boarDead + "", Color.RED, 60);

        setCellValueEx(16, height - 1, Color.WHITE, "ü¶å" , Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(17, height - 1, Color.WHITE, RabbType.deerLive - RabbType.deerDead + "", Color.BLACK, 60);
        setCellValueEx(18, height - 1, Color.WHITE, RabbType.deerDead + "", Color.RED, 60);

        setCellValueEx(20, height - 1, Color.WHITE, "üêé" , Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(21, height - 1, Color.WHITE, RabbType.horseLive - RabbType.horseDead + "", Color.BLACK, 60);
        setCellValueEx(22, height - 1, Color.WHITE, RabbType.horseDead + "", Color.RED, 60);

        setCellValueEx(24, height - 1, Color.WHITE, "üêÆ" , Color.RED, 95);                      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏ - —Å–º–µ—Ä—Ç–∏
        setCellValueEx(25, height - 1, Color.WHITE, RabbType.buffaloLive - RabbType.buffaloDead + "", Color.BLACK, 60);
        setCellValueEx(26, height - 1, Color.WHITE, RabbType.buffaloDead + "", Color.RED, 60);
    }


    // ---------------- –ö–£–ë–ò–ö –†–£–ë–ò–ö–ê -------------------------   // üêÉ, üêª, üêé, ü¶å, üêó, üêë, üêê, üê∫ , üêç, ü¶ä, ü¶Ö, üêá, ü¶Ü, üêÅ, üêõ, üçÄ, ‚¨úÔ∏è

    public void cubatrix() {


        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {

                cubix[j][i][0] = new ArrayList<Cub>();                                                              // —Å–æ–∑–¥–∞–Ω–∏–µ  –ø–æ–ª—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∏–∫–æ–Ω–∫–∏  üü´    ‚¨ú   ‚¨õ
                cubix[j][i][0].add(new ArrayList<Cub>());

                cubix[j][i][1] = new ArrayList<Plant>();                                                                 // üçÄ  üåø   üåæ‚òòÔ∏è
                cubix2[j][i][1] = new ArrayList<Plant>();

                cubix[j][i][2] = new ArrayList<PlantEating>();                                                           // üêá
                cubix2[j][i][2] = new ArrayList<PlantEating>();

                cubix[j][i][3] = new ArrayList<Predator>();                                                              // üê∫
                cubix2[j][i][3] = new ArrayList<Predator>();

                cubix[j][i][4] = new ArrayList<Rats>();                                                                  // üêÅ
                cubix2[j][i][4] = new ArrayList<Rats>();
            }
        }
    }

    // ---------------–ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –∏ –≥–æ–ª–æ–¥–Ω–æ–π —Å–º–µ—Ä—Ç–∏ --------------------
    public void setka() {

        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                for (int n = 1; n < animal; n++) {

                    if (!cubix[j][i][n].isEmpty()) {                                                                    //  –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ñ–∏–≤–Ω–æ—Å—Ç–∏
                        for (int k = 0; k < cubix[j][i][n].size(); k++) {                                               //  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∞—Ä–µ–π –Ω–∞ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
                            //System.out.println(((Animals) cubix[j][i][n].get(k)) + "  " + ((Animals) cubix[j][i][n].get(k)).hashCode()  + "  "+((Animals) cubix[j][i][n].get(k)).getLive());
                            ((Animals) cubix[j][i][n].get(k)).setLive();                                                //–∑–∞–±–∏—Ä–∞–µ—Ç –∫—É—Å–æ—á–µ–∫ –∑–¥–æ—Ä–æ–≤—å—è

                            if (!(cubix[j][i][n].get(k).getClass().equals(Koko.class)) && !(cubix[j][i][n].get(k).getClass().equals(Herb.class))) {                               // –∏—Å–∫–ª—é—á–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π
                                    //System.out.println(((Animals) cubix[j][i][n].get(k)) + "  " +((Animals) cubix[j][i][n].get(k)).hashCode()  + "  "+((Animals) cubix[j][i][n].get(k)).getLive());

                                    if (((Animals) cubix[j][i][n].get(k)).getLive() == 10200) {                             // –≥—Ä—É–∑ –¥–≤–µ—Å—Ç–∏

                                    ((Animals) cubix[j][i][n].get(k)).talk();                                           // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏
                                    ((Animals) cubix[j][i][n].get(k)).deadPluss();


                                    cubix[j][i][n].remove(k);                                                          // —É–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ–¥–Ω–æ–≥–æ

                                    //-------------------------- –∫—É–¥–∞ –±–µ–∂–∞—Ç—å - —Ç–æ? ---------------------------------------------------
                                } else {
                                    int speed = ThreadLocalRandom.current().nextInt(((Animals) cubix[j][i][n].get(k)).getSpeed()) + 1;
                                    //System.out.println(speed);
                                    // —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–µ–ª–∫–∞ —Å–∏—Å—Ç–µ–º—ã)
                                    if (day % 4 / speed == 0) {

                                        int z = ThreadLocalRandom.current().nextInt(5);
                                        switch (z) {
                                            case 0, 5:
                                                cubix2[j][i][n].add(cubix[j][i][n].get(k));                                 // —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ
                                                break;
                                            case 1:                                                                         // –≤–ø—Ä–∞–≤–æ –µ—Å–ª–∏ –Ω–µ —è–º–∞
                                                if (j > width - 3) cubix2[j][i][n].add(cubix[j][i][n].get(k));
                                                else cubix2[j + 1][i][n].add(cubix[j][i][n].get(k));
                                                break;
                                            case 2:
                                                if (j < 2) cubix2[j][i][n].add(cubix[j][i][n].get(k));
                                                else cubix2[j - 1][i][n].add(cubix[j][i][n].get(k));
                                                break;
                                            case 3:
                                                if (i > height - 3) cubix2[j][i][n].add(cubix[j][i][n].get(k));
                                                else cubix2[j][i + 1][n].add(cubix[j][i][n].get(k));
                                                break;
                                            case 4:
                                                if (i < 2) cubix2[j][i][n].add(cubix[j][i][n].get(k));
                                                else cubix2[j][i - 1][n].add(cubix[j][i][n].get(k));
                                                break;
                                        }
                                        cubix[j][i][n].remove(k);                                                           // —É–¥–∞–ª–µ–Ω–∏–µ –∂–∏–≤–Ω–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
                                    }
                                }
                           }
                        }
                    }
                }
            }
        }
        Evolution.eatDead();          //------------–ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π----------------------

        Form3Dto2D.setkas();          // --------------–ø–µ—Ä–µ–≤–æ–¥ –º–∞—Å—Å–∏–≤–∞ 3D –≤ 2D ----------------------

        draw();                       //  --------- –†–∏—Å—É–µ—Ç 2D –ø–æ–ª–µ ---------------------
    }


    public void draw() {

        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                String icona = matrix[j][i];
                switch (icona) {
                    case "üê∫": color = Color.BROWN; textSize = 75; break;
                    case "üêª": color = Color.BROWN; textSize = 95; break;
                    case "ü¶ä": color = Color.BROWN; textSize = 70; break;
                    case "üêç": color = Color.BROWN; textSize = 85; break;
                    case "ü¶Ö": color = Color.BROWN; textSize = 80; break;
                    case "üêá": color = Color.BLACK; textSize = 50; break;
                    case "üêê", "üêë" : color = Color.BLACK; textSize = 70; break;
                    case "üêñ" : color = Color.BLACK; textSize = 80; break;
                    case "üêé", "ü¶å", "üêÆ" : color = Color.BLACK; textSize = 95; break;
                    case "ü¶Ü", "üêì" : color = Color.AZURE; textSize = 40; break;
                    case "üê≠" : color = Color.CHOCOLATE; textSize = 30; break;
                    case "‚òòÔ∏è": color = Color.GREEN; textSize = 40; break;
                    case "üåø": color = Color.GREEN; textSize = 50;break;

                }
                setCellValueEx(j, i, Color.DARKSEAGREEN, matrix[j][i], color, textSize);

            }
        }
    }

    public class Cub {
    }
}





